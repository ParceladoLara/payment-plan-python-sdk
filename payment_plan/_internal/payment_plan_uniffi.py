

# This file was autogenerated by some hot garbage in the `uniffi` crate.
# Trust me, you don't want to mess with it!

# Common helper code.
#
# Ideally this would live in a separate .py file where it can be unittested etc
# in isolation, and perhaps even published as a re-useable package.
#
# However, it's important that the details of how this helper code works (e.g. the
# way that different builtin types are passed across the FFI) exactly match what's
# expected by the rust code on the other side of the interface. In practice right
# now that means coming from the exact some version of `uniffi` that was used to
# compile the rust component. The easiest way to ensure this is to bundle the Python
# helpers directly inline like we're doing here.

from __future__ import annotations
import os
import sys
import ctypes
import enum
import struct
import contextlib
import datetime
import threading
import itertools
import traceback
import typing
import platform

# Used for default argument values
_DEFAULT = object() # type: typing.Any


class _UniffiRustBuffer(ctypes.Structure):
    _fields_ = [
        ("capacity", ctypes.c_uint64),
        ("len", ctypes.c_uint64),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    @staticmethod
    def default():
        return _UniffiRustBuffer(0, 0, None)

    @staticmethod
    def alloc(size):
        return _uniffi_rust_call(_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_alloc, size)

    @staticmethod
    def reserve(rbuf, additional):
        return _uniffi_rust_call(_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_reserve, rbuf, additional)

    def free(self):
        return _uniffi_rust_call(_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_free, self)

    def __str__(self):
        return "_UniffiRustBuffer(capacity={}, len={}, data={})".format(
            self.capacity,
            self.len,
            self.data[0:self.len]
        )

    @contextlib.contextmanager
    def alloc_with_builder(*args):
        """Context-manger to allocate a buffer using a _UniffiRustBufferBuilder.

        The allocated buffer will be automatically freed if an error occurs, ensuring that
        we don't accidentally leak it.
        """
        builder = _UniffiRustBufferBuilder()
        try:
            yield builder
        except:
            builder.discard()
            raise

    @contextlib.contextmanager
    def consume_with_stream(self):
        """Context-manager to consume a buffer using a _UniffiRustBufferStream.

        The _UniffiRustBuffer will be freed once the context-manager exits, ensuring that we don't
        leak it even if an error occurs.
        """
        try:
            s = _UniffiRustBufferStream.from_rust_buffer(self)
            yield s
            if s.remaining() != 0:
                raise RuntimeError("junk data left in buffer at end of consume_with_stream")
        finally:
            self.free()

    @contextlib.contextmanager
    def read_with_stream(self):
        """Context-manager to read a buffer using a _UniffiRustBufferStream.

        This is like consume_with_stream, but doesn't free the buffer afterwards.
        It should only be used with borrowed `_UniffiRustBuffer` data.
        """
        s = _UniffiRustBufferStream.from_rust_buffer(self)
        yield s
        if s.remaining() != 0:
            raise RuntimeError("junk data left in buffer at end of read_with_stream")

class _UniffiForeignBytes(ctypes.Structure):
    _fields_ = [
        ("len", ctypes.c_int32),
        ("data", ctypes.POINTER(ctypes.c_char)),
    ]

    def __str__(self):
        return "_UniffiForeignBytes(len={}, data={})".format(self.len, self.data[0:self.len])


class _UniffiRustBufferStream:
    """
    Helper for structured reading of bytes from a _UniffiRustBuffer
    """

    def __init__(self, data, len):
        self.data = data
        self.len = len
        self.offset = 0

    @classmethod
    def from_rust_buffer(cls, buf):
        return cls(buf.data, buf.len)

    def remaining(self):
        return self.len - self.offset

    def _unpack_from(self, size, format):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        value = struct.unpack(format, self.data[self.offset:self.offset+size])[0]
        self.offset += size
        return value

    def read(self, size):
        if self.offset + size > self.len:
            raise InternalError("read past end of rust buffer")
        data = self.data[self.offset:self.offset+size]
        self.offset += size
        return data

    def read_i8(self):
        return self._unpack_from(1, ">b")

    def read_u8(self):
        return self._unpack_from(1, ">B")

    def read_i16(self):
        return self._unpack_from(2, ">h")

    def read_u16(self):
        return self._unpack_from(2, ">H")

    def read_i32(self):
        return self._unpack_from(4, ">i")

    def read_u32(self):
        return self._unpack_from(4, ">I")

    def read_i64(self):
        return self._unpack_from(8, ">q")

    def read_u64(self):
        return self._unpack_from(8, ">Q")

    def read_float(self):
        v = self._unpack_from(4, ">f")
        return v

    def read_double(self):
        return self._unpack_from(8, ">d")

class _UniffiRustBufferBuilder:
    """
    Helper for structured writing of bytes into a _UniffiRustBuffer.
    """

    def __init__(self):
        self.rbuf = _UniffiRustBuffer.alloc(16)
        self.rbuf.len = 0

    def finalize(self):
        rbuf = self.rbuf
        self.rbuf = None
        return rbuf

    def discard(self):
        if self.rbuf is not None:
            rbuf = self.finalize()
            rbuf.free()

    @contextlib.contextmanager
    def _reserve(self, num_bytes):
        if self.rbuf.len + num_bytes > self.rbuf.capacity:
            self.rbuf = _UniffiRustBuffer.reserve(self.rbuf, num_bytes)
        yield None
        self.rbuf.len += num_bytes

    def _pack_into(self, size, format, value):
        with self._reserve(size):
            # XXX TODO: I feel like I should be able to use `struct.pack_into` here but can't figure it out.
            for i, byte in enumerate(struct.pack(format, value)):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write(self, value):
        with self._reserve(len(value)):
            for i, byte in enumerate(value):
                self.rbuf.data[self.rbuf.len + i] = byte

    def write_i8(self, v):
        self._pack_into(1, ">b", v)

    def write_u8(self, v):
        self._pack_into(1, ">B", v)

    def write_i16(self, v):
        self._pack_into(2, ">h", v)

    def write_u16(self, v):
        self._pack_into(2, ">H", v)

    def write_i32(self, v):
        self._pack_into(4, ">i", v)

    def write_u32(self, v):
        self._pack_into(4, ">I", v)

    def write_i64(self, v):
        self._pack_into(8, ">q", v)

    def write_u64(self, v):
        self._pack_into(8, ">Q", v)

    def write_float(self, v):
        self._pack_into(4, ">f", v)

    def write_double(self, v):
        self._pack_into(8, ">d", v)

    def write_c_size_t(self, v):
        self._pack_into(ctypes.sizeof(ctypes.c_size_t) , "@N", v)
# A handful of classes and functions to support the generated data structures.
# This would be a good candidate for isolating in its own ffi-support lib.

class InternalError(Exception):
    pass

class _UniffiRustCallStatus(ctypes.Structure):
    """
    Error runtime.
    """
    _fields_ = [
        ("code", ctypes.c_int8),
        ("error_buf", _UniffiRustBuffer),
    ]

    # These match the values from the uniffi::rustcalls module
    CALL_SUCCESS = 0
    CALL_ERROR = 1
    CALL_UNEXPECTED_ERROR = 2

    @staticmethod
    def default():
        return _UniffiRustCallStatus(code=_UniffiRustCallStatus.CALL_SUCCESS, error_buf=_UniffiRustBuffer.default())

    def __str__(self):
        if self.code == _UniffiRustCallStatus.CALL_SUCCESS:
            return "_UniffiRustCallStatus(CALL_SUCCESS)"
        elif self.code == _UniffiRustCallStatus.CALL_ERROR:
            return "_UniffiRustCallStatus(CALL_ERROR)"
        elif self.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
            return "_UniffiRustCallStatus(CALL_UNEXPECTED_ERROR)"
        else:
            return "_UniffiRustCallStatus(<invalid code>)"

def _uniffi_rust_call(fn, *args):
    # Call a rust function
    return _uniffi_rust_call_with_error(None, fn, *args)

def _uniffi_rust_call_with_error(error_ffi_converter, fn, *args):
    # Call a rust function and handle any errors
    #
    # This function is used for rust calls that return Result<> and therefore can set the CALL_ERROR status code.
    # error_ffi_converter must be set to the _UniffiConverter for the error class that corresponds to the result.
    call_status = _UniffiRustCallStatus.default()

    args_with_error = args + (ctypes.byref(call_status),)
    result = fn(*args_with_error)
    _uniffi_check_call_status(error_ffi_converter, call_status)
    return result

def _uniffi_check_call_status(error_ffi_converter, call_status):
    if call_status.code == _UniffiRustCallStatus.CALL_SUCCESS:
        pass
    elif call_status.code == _UniffiRustCallStatus.CALL_ERROR:
        if error_ffi_converter is None:
            call_status.error_buf.free()
            raise InternalError("_uniffi_rust_call_with_error: CALL_ERROR, but error_ffi_converter is None")
        else:
            raise error_ffi_converter.lift(call_status.error_buf)
    elif call_status.code == _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR:
        # When the rust code sees a panic, it tries to construct a _UniffiRustBuffer
        # with the message.  But if that code panics, then it just sends back
        # an empty buffer.
        if call_status.error_buf.len > 0:
            msg = _UniffiConverterString.lift(call_status.error_buf)
        else:
            msg = "Unknown rust panic"
        raise InternalError(msg)
    else:
        raise InternalError("Invalid _UniffiRustCallStatus code: {}".format(
            call_status.code))

def _uniffi_trait_interface_call(call_status, make_call, write_return_value):
    try:
        return write_return_value(make_call())
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))

def _uniffi_trait_interface_call_with_error(call_status, make_call, write_return_value, error_type, lower_error):
    try:
        try:
            return write_return_value(make_call())
        except error_type as e:
            call_status.code = _UniffiRustCallStatus.CALL_ERROR
            call_status.error_buf = lower_error(e)
    except Exception as e:
        call_status.code = _UniffiRustCallStatus.CALL_UNEXPECTED_ERROR
        call_status.error_buf = _UniffiConverterString.lower(repr(e))
class _UniffiHandleMap:
    """
    A map where inserting, getting and removing data is synchronized with a lock.
    """

    def __init__(self):
        # type Handle = int
        self._map = {}  # type: Dict[Handle, Any]
        self._lock = threading.Lock()
        self._counter = itertools.count()

    def insert(self, obj):
        with self._lock:
            handle = next(self._counter)
            self._map[handle] = obj
            return handle

    def get(self, handle):
        try:
            with self._lock:
                return self._map[handle]
        except KeyError:
            raise InternalError("_UniffiHandleMap.get: Invalid handle")

    def remove(self, handle):
        try:
            with self._lock:
                return self._map.pop(handle)
        except KeyError:
            raise InternalError("_UniffiHandleMap.remove: Invalid handle")

    def __len__(self):
        return len(self._map)
# Types conforming to `_UniffiConverterPrimitive` pass themselves directly over the FFI.
class _UniffiConverterPrimitive:
    @classmethod
    def lift(cls, value):
        return value

    @classmethod
    def lower(cls, value):
        return value

class _UniffiConverterPrimitiveInt(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__index__()
        except Exception:
            raise TypeError("'{}' object cannot be interpreted as an integer".format(type(value).__name__))
        if not isinstance(value, int):
            raise TypeError("__index__ returned non-int (type {})".format(type(value).__name__))
        if not cls.VALUE_MIN <= value < cls.VALUE_MAX:
            raise ValueError("{} requires {} <= value < {}".format(cls.CLASS_NAME, cls.VALUE_MIN, cls.VALUE_MAX))

class _UniffiConverterPrimitiveFloat(_UniffiConverterPrimitive):
    @classmethod
    def check_lower(cls, value):
        try:
            value = value.__float__()
        except Exception:
            raise TypeError("must be real number, not {}".format(type(value).__name__))
        if not isinstance(value, float):
            raise TypeError("__float__ returned non-float (type {})".format(type(value).__name__))

# Helper class for wrapper types that will always go through a _UniffiRustBuffer.
# Classes should inherit from this and implement the `read` and `write` static methods.
class _UniffiConverterRustBuffer:
    @classmethod
    def lift(cls, rbuf):
        with rbuf.consume_with_stream() as stream:
            return cls.read(stream)

    @classmethod
    def lower(cls, value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            cls.write(value, builder)
            return builder.finalize()

# Contains loading, initialization code, and the FFI Function declarations.
# Define some ctypes FFI types that we use in the library

"""
Function pointer for a Rust task, which a callback function that takes a opaque pointer
"""
_UNIFFI_RUST_TASK = ctypes.CFUNCTYPE(None, ctypes.c_void_p, ctypes.c_int8)

def _uniffi_future_callback_t(return_type):
    """
    Factory function to create callback function types for async functions
    """
    return ctypes.CFUNCTYPE(None, ctypes.c_uint64, return_type, _UniffiRustCallStatus)

def _uniffi_load_indirect():
    """
    This is how we find and load the dynamic library provided by the component.
    For now we just look it up by name.
    """
    if sys.platform == "darwin":
        libname = "lib{}.dylib"
    elif sys.platform.startswith("win"):
        # As of python3.8, ctypes does not seem to search $PATH when loading DLLs.
        # We could use `os.add_dll_directory` to configure the search path, but
        # it doesn't feel right to mess with application-wide settings. Let's
        # assume that the `.dll` is next to the `.py` file and load by full path.
        libname = os.path.join(
            os.path.dirname(__file__),
            "{}.dll",
        )
    else:
        # Anything else must be an ELF platform - Linux, *BSD, Solaris/illumos
        libname = "lib{}.so"

    libname = libname.format("payment_plan_uniffi")
    path = os.path.join(os.path.dirname(__file__), libname)
    lib = ctypes.cdll.LoadLibrary(path)
    return lib

def _uniffi_check_contract_api_version(lib):
    # Get the bindings contract version from our ComponentInterface
    bindings_contract_version = 26
    # Get the scaffolding contract version by calling the into the dylib
    scaffolding_contract_version = lib.ffi_payment_plan_uniffi_uniffi_contract_version()
    if bindings_contract_version != scaffolding_contract_version:
        raise InternalError("UniFFI contract version mismatch: try cleaning and rebuilding your project")

def _uniffi_check_api_checksums(lib):
    if lib.uniffi_payment_plan_uniffi_checksum_func_calculate_down_payment_plan() != 327:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")
    if lib.uniffi_payment_plan_uniffi_checksum_func_calculate_payment_plan() != 58298:
        raise InternalError("UniFFI API checksum mismatch: try cleaning and rebuilding your project")

# A ctypes library to expose the extern-C FFI definitions.
# This is an implementation detail which will be called internally by the public API.

_UniffiLib = _uniffi_load_indirect()
_UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK = ctypes.CFUNCTYPE(None,ctypes.c_uint64,ctypes.c_int8,
)
_UNIFFI_FOREIGN_FUTURE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
_UNIFFI_CALLBACK_INTERFACE_FREE = ctypes.CFUNCTYPE(None,ctypes.c_uint64,
)
class _UniffiForeignFuture(ctypes.Structure):
    _fields_ = [
        ("handle", ctypes.c_uint64),
        ("free", _UNIFFI_FOREIGN_FUTURE_FREE),
    ]
class _UniffiForeignFutureStructU8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU8,
)
class _UniffiForeignFutureStructI8(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int8),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I8 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI8,
)
class _UniffiForeignFutureStructU16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU16,
)
class _UniffiForeignFutureStructI16(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int16),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I16 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI16,
)
class _UniffiForeignFutureStructU32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU32,
)
class _UniffiForeignFutureStructI32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int32),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI32,
)
class _UniffiForeignFutureStructU64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_uint64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_U64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructU64,
)
class _UniffiForeignFutureStructI64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_int64),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_I64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructI64,
)
class _UniffiForeignFutureStructF32(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_float),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F32 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF32,
)
class _UniffiForeignFutureStructF64(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_double),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_F64 = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructF64,
)
class _UniffiForeignFutureStructPointer(ctypes.Structure):
    _fields_ = [
        ("return_value", ctypes.c_void_p),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_POINTER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructPointer,
)
class _UniffiForeignFutureStructRustBuffer(ctypes.Structure):
    _fields_ = [
        ("return_value", _UniffiRustBuffer),
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_RUST_BUFFER = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructRustBuffer,
)
class _UniffiForeignFutureStructVoid(ctypes.Structure):
    _fields_ = [
        ("call_status", _UniffiRustCallStatus),
    ]
_UNIFFI_FOREIGN_FUTURE_COMPLETE_VOID = ctypes.CFUNCTYPE(None,ctypes.c_uint64,_UniffiForeignFutureStructVoid,
)
_UniffiLib.uniffi_payment_plan_uniffi_fn_func_calculate_down_payment_plan.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payment_plan_uniffi_fn_func_calculate_down_payment_plan.restype = _UniffiRustBuffer
_UniffiLib.uniffi_payment_plan_uniffi_fn_func_calculate_payment_plan.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.uniffi_payment_plan_uniffi_fn_func_calculate_payment_plan.restype = _UniffiRustBuffer
_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_alloc.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_alloc.restype = _UniffiRustBuffer
_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_from_bytes.argtypes = (
    _UniffiForeignBytes,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_from_bytes.restype = _UniffiRustBuffer
_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_free.argtypes = (
    _UniffiRustBuffer,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_free.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_reserve.argtypes = (
    _UniffiRustBuffer,
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rustbuffer_reserve.restype = _UniffiRustBuffer
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_u8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_u8.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_u8.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_u8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_u8.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_u8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_u8.restype = ctypes.c_uint8
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_i8.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_i8.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_i8.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_i8.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_i8.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_i8.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_i8.restype = ctypes.c_int8
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_u16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_u16.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_u16.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_u16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_u16.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_u16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_u16.restype = ctypes.c_uint16
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_i16.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_i16.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_i16.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_i16.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_i16.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_i16.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_i16.restype = ctypes.c_int16
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_u32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_u32.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_u32.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_u32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_u32.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_u32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_u32.restype = ctypes.c_uint32
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_i32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_i32.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_i32.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_i32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_i32.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_i32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_i32.restype = ctypes.c_int32
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_u64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_u64.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_u64.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_u64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_u64.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_u64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_u64.restype = ctypes.c_uint64
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_i64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_i64.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_i64.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_i64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_i64.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_i64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_i64.restype = ctypes.c_int64
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_f32.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_f32.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_f32.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_f32.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_f32.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_f32.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_f32.restype = ctypes.c_float
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_f64.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_f64.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_f64.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_f64.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_f64.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_f64.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_f64.restype = ctypes.c_double
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_pointer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_pointer.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_pointer.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_pointer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_pointer.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_pointer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_pointer.restype = ctypes.c_void_p
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_rust_buffer.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_rust_buffer.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_rust_buffer.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_rust_buffer.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_rust_buffer.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_rust_buffer.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_rust_buffer.restype = _UniffiRustBuffer
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_void.argtypes = (
    ctypes.c_uint64,
    _UNIFFI_RUST_FUTURE_CONTINUATION_CALLBACK,
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_poll_void.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_cancel_void.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_void.argtypes = (
    ctypes.c_uint64,
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_free_void.restype = None
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_void.argtypes = (
    ctypes.c_uint64,
    ctypes.POINTER(_UniffiRustCallStatus),
)
_UniffiLib.ffi_payment_plan_uniffi_rust_future_complete_void.restype = None
_UniffiLib.uniffi_payment_plan_uniffi_checksum_func_calculate_down_payment_plan.argtypes = (
)
_UniffiLib.uniffi_payment_plan_uniffi_checksum_func_calculate_down_payment_plan.restype = ctypes.c_uint16
_UniffiLib.uniffi_payment_plan_uniffi_checksum_func_calculate_payment_plan.argtypes = (
)
_UniffiLib.uniffi_payment_plan_uniffi_checksum_func_calculate_payment_plan.restype = ctypes.c_uint16
_UniffiLib.ffi_payment_plan_uniffi_uniffi_contract_version.argtypes = (
)
_UniffiLib.ffi_payment_plan_uniffi_uniffi_contract_version.restype = ctypes.c_uint32

_uniffi_check_contract_api_version(_UniffiLib)
# _uniffi_check_api_checksums(_UniffiLib)

# Public interface members begin here.


class _UniffiConverterUInt16(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u16"
    VALUE_MIN = 0
    VALUE_MAX = 2**16

    @staticmethod
    def read(buf):
        return buf.read_u16()

    @staticmethod
    def write(value, buf):
        buf.write_u16(value)

class _UniffiConverterUInt32(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "u32"
    VALUE_MIN = 0
    VALUE_MAX = 2**32

    @staticmethod
    def read(buf):
        return buf.read_u32()

    @staticmethod
    def write(value, buf):
        buf.write_u32(value)

class _UniffiConverterInt64(_UniffiConverterPrimitiveInt):
    CLASS_NAME = "i64"
    VALUE_MIN = -2**63
    VALUE_MAX = 2**63

    @staticmethod
    def read(buf):
        return buf.read_i64()

    @staticmethod
    def write(value, buf):
        buf.write_i64(value)

class _UniffiConverterDouble(_UniffiConverterPrimitiveFloat):
    @staticmethod
    def read(buf):
        return buf.read_double()

    @staticmethod
    def write(value, buf):
        buf.write_double(value)

class _UniffiConverterBool:
    @classmethod
    def check_lower(cls, value):
        return not not value

    @classmethod
    def lower(cls, value):
        return 1 if value else 0

    @staticmethod
    def lift(value):
        return value != 0

    @classmethod
    def read(cls, buf):
        return cls.lift(buf.read_u8())

    @classmethod
    def write(cls, value, buf):
        buf.write_u8(value)

class _UniffiConverterString:
    @staticmethod
    def check_lower(value):
        if not isinstance(value, str):
            raise TypeError("argument must be str, not {}".format(type(value).__name__))
        return value

    @staticmethod
    def read(buf):
        size = buf.read_i32()
        if size < 0:
            raise InternalError("Unexpected negative string length")
        utf8_bytes = buf.read(size)
        return utf8_bytes.decode("utf-8")

    @staticmethod
    def write(value, buf):
        utf8_bytes = value.encode("utf-8")
        buf.write_i32(len(utf8_bytes))
        buf.write(utf8_bytes)

    @staticmethod
    def lift(buf):
        with buf.consume_with_stream() as stream:
            return stream.read(stream.remaining()).decode("utf-8")

    @staticmethod
    def lower(value):
        with _UniffiRustBuffer.alloc_with_builder() as builder:
            builder.write(value.encode("utf-8"))
            return builder.finalize()

# The Timestamp type.
Timestamp = datetime.datetime

# There is a loss of precision when converting from Rust timestamps,
# which are accurate to the nanosecond,
# to Python datetimes, which have a variable precision due to the use of float as representation.
class _UniffiConverterTimestamp(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        seconds = buf.read_i64()
        microseconds = buf.read_u32() / 1000
        # Use fromtimestamp(0) then add the seconds using a timedelta.  This
        # ensures that we get OverflowError rather than ValueError when
        # seconds is too large.
        if seconds >= 0:
            return datetime.datetime.fromtimestamp(0, tz=datetime.timezone.utc) + datetime.timedelta(seconds=seconds, microseconds=microseconds)
        else:
            return datetime.datetime.fromtimestamp(0, tz=datetime.timezone.utc) - datetime.timedelta(seconds=-seconds, microseconds=microseconds)

    @staticmethod
    def check_lower(value):
        pass

    @staticmethod
    def write(value, buf):
        if value >= datetime.datetime.fromtimestamp(0, datetime.timezone.utc):
            sign = 1
            delta = value - datetime.datetime.fromtimestamp(0, datetime.timezone.utc)
        else:
            sign = -1
            delta = datetime.datetime.fromtimestamp(0, datetime.timezone.utc) - value

        seconds = delta.seconds + delta.days * 24 * 3600
        nanoseconds = delta.microseconds * 1000
        buf.write_i64(sign * seconds)
        buf.write_u32(nanoseconds)


class DownPaymentParams:
    params: "Params"
    requested_amount: "float"
    min_installment_amount: "float"
    first_payment_date: "Timestamp"
    installments: "int"
    def __init__(self, *, params: "Params", requested_amount: "float", min_installment_amount: "float", first_payment_date: "Timestamp", installments: "int"):
        self.params = params
        self.requested_amount = requested_amount
        self.min_installment_amount = min_installment_amount
        self.first_payment_date = first_payment_date
        self.installments = installments

    def __str__(self):
        return "DownPaymentParams(params={}, requested_amount={}, min_installment_amount={}, first_payment_date={}, installments={})".format(self.params, self.requested_amount, self.min_installment_amount, self.first_payment_date, self.installments)

    def __eq__(self, other):
        if self.params != other.params:
            return False
        if self.requested_amount != other.requested_amount:
            return False
        if self.min_installment_amount != other.min_installment_amount:
            return False
        if self.first_payment_date != other.first_payment_date:
            return False
        if self.installments != other.installments:
            return False
        return True

class _UniffiConverterTypeDownPaymentParams(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DownPaymentParams(
            params=_UniffiConverterTypeParams.read(buf),
            requested_amount=_UniffiConverterDouble.read(buf),
            min_installment_amount=_UniffiConverterDouble.read(buf),
            first_payment_date=_UniffiConverterTimestamp.read(buf),
            installments=_UniffiConverterUInt32.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterTypeParams.check_lower(value.params)
        _UniffiConverterDouble.check_lower(value.requested_amount)
        _UniffiConverterDouble.check_lower(value.min_installment_amount)
        _UniffiConverterTimestamp.check_lower(value.first_payment_date)
        _UniffiConverterUInt32.check_lower(value.installments)

    @staticmethod
    def write(value, buf):
        _UniffiConverterTypeParams.write(value.params, buf)
        _UniffiConverterDouble.write(value.requested_amount, buf)
        _UniffiConverterDouble.write(value.min_installment_amount, buf)
        _UniffiConverterTimestamp.write(value.first_payment_date, buf)
        _UniffiConverterUInt32.write(value.installments, buf)


class DownPaymentResponse:
    installment_amount: "float"
    total_amount: "float"
    installment_quantity: "int"
    first_payment_date: "Timestamp"
    plans: "typing.List[Response]"
    def __init__(self, *, installment_amount: "float", total_amount: "float", installment_quantity: "int", first_payment_date: "Timestamp", plans: "typing.List[Response]"):
        self.installment_amount = installment_amount
        self.total_amount = total_amount
        self.installment_quantity = installment_quantity
        self.first_payment_date = first_payment_date
        self.plans = plans

    def __str__(self):
        return "DownPaymentResponse(installment_amount={}, total_amount={}, installment_quantity={}, first_payment_date={}, plans={})".format(self.installment_amount, self.total_amount, self.installment_quantity, self.first_payment_date, self.plans)

    def __eq__(self, other):
        if self.installment_amount != other.installment_amount:
            return False
        if self.total_amount != other.total_amount:
            return False
        if self.installment_quantity != other.installment_quantity:
            return False
        if self.first_payment_date != other.first_payment_date:
            return False
        if self.plans != other.plans:
            return False
        return True

class _UniffiConverterTypeDownPaymentResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return DownPaymentResponse(
            installment_amount=_UniffiConverterDouble.read(buf),
            total_amount=_UniffiConverterDouble.read(buf),
            installment_quantity=_UniffiConverterUInt32.read(buf),
            first_payment_date=_UniffiConverterTimestamp.read(buf),
            plans=_UniffiConverterSequenceTypeResponse.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterDouble.check_lower(value.installment_amount)
        _UniffiConverterDouble.check_lower(value.total_amount)
        _UniffiConverterUInt32.check_lower(value.installment_quantity)
        _UniffiConverterTimestamp.check_lower(value.first_payment_date)
        _UniffiConverterSequenceTypeResponse.check_lower(value.plans)

    @staticmethod
    def write(value, buf):
        _UniffiConverterDouble.write(value.installment_amount, buf)
        _UniffiConverterDouble.write(value.total_amount, buf)
        _UniffiConverterUInt32.write(value.installment_quantity, buf)
        _UniffiConverterTimestamp.write(value.first_payment_date, buf)
        _UniffiConverterSequenceTypeResponse.write(value.plans, buf)


class Params:
    requested_amount: "float"
    first_payment_date: "Timestamp"
    requested_date: "Timestamp"
    installments: "int"
    debit_service_percentage: "int"
    mdr: "float"
    tac_percentage: "float"
    iof_overall: "float"
    iof_percentage: "float"
    interest_rate: "float"
    min_installment_amount: "float"
    max_total_amount: "float"
    disbursement_only_on_business_days: "bool"
    def __init__(self, *, requested_amount: "float", first_payment_date: "Timestamp", requested_date: "Timestamp", installments: "int", debit_service_percentage: "int", mdr: "float", tac_percentage: "float", iof_overall: "float", iof_percentage: "float", interest_rate: "float", min_installment_amount: "float", max_total_amount: "float", disbursement_only_on_business_days: "bool"):
        self.requested_amount = requested_amount
        self.first_payment_date = first_payment_date
        self.requested_date = requested_date
        self.installments = installments
        self.debit_service_percentage = debit_service_percentage
        self.mdr = mdr
        self.tac_percentage = tac_percentage
        self.iof_overall = iof_overall
        self.iof_percentage = iof_percentage
        self.interest_rate = interest_rate
        self.min_installment_amount = min_installment_amount
        self.max_total_amount = max_total_amount
        self.disbursement_only_on_business_days = disbursement_only_on_business_days

    def __str__(self):
        return "Params(requested_amount={}, first_payment_date={}, requested_date={}, installments={}, debit_service_percentage={}, mdr={}, tac_percentage={}, iof_overall={}, iof_percentage={}, interest_rate={}, min_installment_amount={}, max_total_amount={}, disbursement_only_on_business_days={})".format(self.requested_amount, self.first_payment_date, self.requested_date, self.installments, self.debit_service_percentage, self.mdr, self.tac_percentage, self.iof_overall, self.iof_percentage, self.interest_rate, self.min_installment_amount, self.max_total_amount, self.disbursement_only_on_business_days)

    def __eq__(self, other):
        if self.requested_amount != other.requested_amount:
            return False
        if self.first_payment_date != other.first_payment_date:
            return False
        if self.requested_date != other.requested_date:
            return False
        if self.installments != other.installments:
            return False
        if self.debit_service_percentage != other.debit_service_percentage:
            return False
        if self.mdr != other.mdr:
            return False
        if self.tac_percentage != other.tac_percentage:
            return False
        if self.iof_overall != other.iof_overall:
            return False
        if self.iof_percentage != other.iof_percentage:
            return False
        if self.interest_rate != other.interest_rate:
            return False
        if self.min_installment_amount != other.min_installment_amount:
            return False
        if self.max_total_amount != other.max_total_amount:
            return False
        if self.disbursement_only_on_business_days != other.disbursement_only_on_business_days:
            return False
        return True

class _UniffiConverterTypeParams(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Params(
            requested_amount=_UniffiConverterDouble.read(buf),
            first_payment_date=_UniffiConverterTimestamp.read(buf),
            requested_date=_UniffiConverterTimestamp.read(buf),
            installments=_UniffiConverterUInt32.read(buf),
            debit_service_percentage=_UniffiConverterUInt16.read(buf),
            mdr=_UniffiConverterDouble.read(buf),
            tac_percentage=_UniffiConverterDouble.read(buf),
            iof_overall=_UniffiConverterDouble.read(buf),
            iof_percentage=_UniffiConverterDouble.read(buf),
            interest_rate=_UniffiConverterDouble.read(buf),
            min_installment_amount=_UniffiConverterDouble.read(buf),
            max_total_amount=_UniffiConverterDouble.read(buf),
            disbursement_only_on_business_days=_UniffiConverterBool.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterDouble.check_lower(value.requested_amount)
        _UniffiConverterTimestamp.check_lower(value.first_payment_date)
        _UniffiConverterTimestamp.check_lower(value.requested_date)
        _UniffiConverterUInt32.check_lower(value.installments)
        _UniffiConverterUInt16.check_lower(value.debit_service_percentage)
        _UniffiConverterDouble.check_lower(value.mdr)
        _UniffiConverterDouble.check_lower(value.tac_percentage)
        _UniffiConverterDouble.check_lower(value.iof_overall)
        _UniffiConverterDouble.check_lower(value.iof_percentage)
        _UniffiConverterDouble.check_lower(value.interest_rate)
        _UniffiConverterDouble.check_lower(value.min_installment_amount)
        _UniffiConverterDouble.check_lower(value.max_total_amount)
        _UniffiConverterBool.check_lower(value.disbursement_only_on_business_days)

    @staticmethod
    def write(value, buf):
        _UniffiConverterDouble.write(value.requested_amount, buf)
        _UniffiConverterTimestamp.write(value.first_payment_date, buf)
        _UniffiConverterTimestamp.write(value.requested_date, buf)
        _UniffiConverterUInt32.write(value.installments, buf)
        _UniffiConverterUInt16.write(value.debit_service_percentage, buf)
        _UniffiConverterDouble.write(value.mdr, buf)
        _UniffiConverterDouble.write(value.tac_percentage, buf)
        _UniffiConverterDouble.write(value.iof_overall, buf)
        _UniffiConverterDouble.write(value.iof_percentage, buf)
        _UniffiConverterDouble.write(value.interest_rate, buf)
        _UniffiConverterDouble.write(value.min_installment_amount, buf)
        _UniffiConverterDouble.write(value.max_total_amount, buf)
        _UniffiConverterBool.write(value.disbursement_only_on_business_days, buf)


class Response:
    installment: "int"
    due_date: "Timestamp"
    disbursement_date: "Timestamp"
    accumulated_days: "int"
    days_index: "float"
    accumulated_days_index: "float"
    interest_rate: "float"
    installment_amount: "float"
    installment_amount_without_tac: "float"
    total_amount: "float"
    debit_service: "float"
    customer_debit_service_amount: "float"
    customer_amount: "float"
    calculation_basis_for_effective_interest_rate: "float"
    merchant_debit_service_amount: "float"
    merchant_total_amount: "float"
    settled_to_merchant: "float"
    mdr_amount: "float"
    effective_interest_rate: "float"
    total_effective_cost: "float"
    eir_yearly: "float"
    tec_yearly: "float"
    eir_monthly: "float"
    tec_monthly: "float"
    total_iof: "float"
    contract_amount: "float"
    contract_amount_without_tac: "float"
    tac_amount: "float"
    iof_percentage: "float"
    overall_iof: "float"
    pre_disbursement_amount: "float"
    paid_total_iof: "float"
    paid_contract_amount: "float"
    def __init__(self, *, installment: "int", due_date: "Timestamp", disbursement_date: "Timestamp", accumulated_days: "int", days_index: "float", accumulated_days_index: "float", interest_rate: "float", installment_amount: "float", installment_amount_without_tac: "float", total_amount: "float", debit_service: "float", customer_debit_service_amount: "float", customer_amount: "float", calculation_basis_for_effective_interest_rate: "float", merchant_debit_service_amount: "float", merchant_total_amount: "float", settled_to_merchant: "float", mdr_amount: "float", effective_interest_rate: "float", total_effective_cost: "float", eir_yearly: "float", tec_yearly: "float", eir_monthly: "float", tec_monthly: "float", total_iof: "float", contract_amount: "float", contract_amount_without_tac: "float", tac_amount: "float", iof_percentage: "float", overall_iof: "float", pre_disbursement_amount: "float", paid_total_iof: "float", paid_contract_amount: "float"):
        self.installment = installment
        self.due_date = due_date
        self.disbursement_date = disbursement_date
        self.accumulated_days = accumulated_days
        self.days_index = days_index
        self.accumulated_days_index = accumulated_days_index
        self.interest_rate = interest_rate
        self.installment_amount = installment_amount
        self.installment_amount_without_tac = installment_amount_without_tac
        self.total_amount = total_amount
        self.debit_service = debit_service
        self.customer_debit_service_amount = customer_debit_service_amount
        self.customer_amount = customer_amount
        self.calculation_basis_for_effective_interest_rate = calculation_basis_for_effective_interest_rate
        self.merchant_debit_service_amount = merchant_debit_service_amount
        self.merchant_total_amount = merchant_total_amount
        self.settled_to_merchant = settled_to_merchant
        self.mdr_amount = mdr_amount
        self.effective_interest_rate = effective_interest_rate
        self.total_effective_cost = total_effective_cost
        self.eir_yearly = eir_yearly
        self.tec_yearly = tec_yearly
        self.eir_monthly = eir_monthly
        self.tec_monthly = tec_monthly
        self.total_iof = total_iof
        self.contract_amount = contract_amount
        self.contract_amount_without_tac = contract_amount_without_tac
        self.tac_amount = tac_amount
        self.iof_percentage = iof_percentage
        self.overall_iof = overall_iof
        self.pre_disbursement_amount = pre_disbursement_amount
        self.paid_total_iof = paid_total_iof
        self.paid_contract_amount = paid_contract_amount

    def __str__(self):
        return "Response(installment={}, due_date={}, disbursement_date={}, accumulated_days={}, days_index={}, accumulated_days_index={}, interest_rate={}, installment_amount={}, installment_amount_without_tac={}, total_amount={}, debit_service={}, customer_debit_service_amount={}, customer_amount={}, calculation_basis_for_effective_interest_rate={}, merchant_debit_service_amount={}, merchant_total_amount={}, settled_to_merchant={}, mdr_amount={}, effective_interest_rate={}, total_effective_cost={}, eir_yearly={}, tec_yearly={}, eir_monthly={}, tec_monthly={}, total_iof={}, contract_amount={}, contract_amount_without_tac={}, tac_amount={}, iof_percentage={}, overall_iof={}, pre_disbursement_amount={}, paid_total_iof={}, paid_contract_amount={})".format(self.installment, self.due_date, self.disbursement_date, self.accumulated_days, self.days_index, self.accumulated_days_index, self.interest_rate, self.installment_amount, self.installment_amount_without_tac, self.total_amount, self.debit_service, self.customer_debit_service_amount, self.customer_amount, self.calculation_basis_for_effective_interest_rate, self.merchant_debit_service_amount, self.merchant_total_amount, self.settled_to_merchant, self.mdr_amount, self.effective_interest_rate, self.total_effective_cost, self.eir_yearly, self.tec_yearly, self.eir_monthly, self.tec_monthly, self.total_iof, self.contract_amount, self.contract_amount_without_tac, self.tac_amount, self.iof_percentage, self.overall_iof, self.pre_disbursement_amount, self.paid_total_iof, self.paid_contract_amount)

    def __eq__(self, other):
        if self.installment != other.installment:
            return False
        if self.due_date != other.due_date:
            return False
        if self.disbursement_date != other.disbursement_date:
            return False
        if self.accumulated_days != other.accumulated_days:
            return False
        if self.days_index != other.days_index:
            return False
        if self.accumulated_days_index != other.accumulated_days_index:
            return False
        if self.interest_rate != other.interest_rate:
            return False
        if self.installment_amount != other.installment_amount:
            return False
        if self.installment_amount_without_tac != other.installment_amount_without_tac:
            return False
        if self.total_amount != other.total_amount:
            return False
        if self.debit_service != other.debit_service:
            return False
        if self.customer_debit_service_amount != other.customer_debit_service_amount:
            return False
        if self.customer_amount != other.customer_amount:
            return False
        if self.calculation_basis_for_effective_interest_rate != other.calculation_basis_for_effective_interest_rate:
            return False
        if self.merchant_debit_service_amount != other.merchant_debit_service_amount:
            return False
        if self.merchant_total_amount != other.merchant_total_amount:
            return False
        if self.settled_to_merchant != other.settled_to_merchant:
            return False
        if self.mdr_amount != other.mdr_amount:
            return False
        if self.effective_interest_rate != other.effective_interest_rate:
            return False
        if self.total_effective_cost != other.total_effective_cost:
            return False
        if self.eir_yearly != other.eir_yearly:
            return False
        if self.tec_yearly != other.tec_yearly:
            return False
        if self.eir_monthly != other.eir_monthly:
            return False
        if self.tec_monthly != other.tec_monthly:
            return False
        if self.total_iof != other.total_iof:
            return False
        if self.contract_amount != other.contract_amount:
            return False
        if self.contract_amount_without_tac != other.contract_amount_without_tac:
            return False
        if self.tac_amount != other.tac_amount:
            return False
        if self.iof_percentage != other.iof_percentage:
            return False
        if self.overall_iof != other.overall_iof:
            return False
        if self.pre_disbursement_amount != other.pre_disbursement_amount:
            return False
        if self.paid_total_iof != other.paid_total_iof:
            return False
        if self.paid_contract_amount != other.paid_contract_amount:
            return False
        return True

class _UniffiConverterTypeResponse(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        return Response(
            installment=_UniffiConverterUInt32.read(buf),
            due_date=_UniffiConverterTimestamp.read(buf),
            disbursement_date=_UniffiConverterTimestamp.read(buf),
            accumulated_days=_UniffiConverterInt64.read(buf),
            days_index=_UniffiConverterDouble.read(buf),
            accumulated_days_index=_UniffiConverterDouble.read(buf),
            interest_rate=_UniffiConverterDouble.read(buf),
            installment_amount=_UniffiConverterDouble.read(buf),
            installment_amount_without_tac=_UniffiConverterDouble.read(buf),
            total_amount=_UniffiConverterDouble.read(buf),
            debit_service=_UniffiConverterDouble.read(buf),
            customer_debit_service_amount=_UniffiConverterDouble.read(buf),
            customer_amount=_UniffiConverterDouble.read(buf),
            calculation_basis_for_effective_interest_rate=_UniffiConverterDouble.read(buf),
            merchant_debit_service_amount=_UniffiConverterDouble.read(buf),
            merchant_total_amount=_UniffiConverterDouble.read(buf),
            settled_to_merchant=_UniffiConverterDouble.read(buf),
            mdr_amount=_UniffiConverterDouble.read(buf),
            effective_interest_rate=_UniffiConverterDouble.read(buf),
            total_effective_cost=_UniffiConverterDouble.read(buf),
            eir_yearly=_UniffiConverterDouble.read(buf),
            tec_yearly=_UniffiConverterDouble.read(buf),
            eir_monthly=_UniffiConverterDouble.read(buf),
            tec_monthly=_UniffiConverterDouble.read(buf),
            total_iof=_UniffiConverterDouble.read(buf),
            contract_amount=_UniffiConverterDouble.read(buf),
            contract_amount_without_tac=_UniffiConverterDouble.read(buf),
            tac_amount=_UniffiConverterDouble.read(buf),
            iof_percentage=_UniffiConverterDouble.read(buf),
            overall_iof=_UniffiConverterDouble.read(buf),
            pre_disbursement_amount=_UniffiConverterDouble.read(buf),
            paid_total_iof=_UniffiConverterDouble.read(buf),
            paid_contract_amount=_UniffiConverterDouble.read(buf),
        )

    @staticmethod
    def check_lower(value):
        _UniffiConverterUInt32.check_lower(value.installment)
        _UniffiConverterTimestamp.check_lower(value.due_date)
        _UniffiConverterTimestamp.check_lower(value.disbursement_date)
        _UniffiConverterInt64.check_lower(value.accumulated_days)
        _UniffiConverterDouble.check_lower(value.days_index)
        _UniffiConverterDouble.check_lower(value.accumulated_days_index)
        _UniffiConverterDouble.check_lower(value.interest_rate)
        _UniffiConverterDouble.check_lower(value.installment_amount)
        _UniffiConverterDouble.check_lower(value.installment_amount_without_tac)
        _UniffiConverterDouble.check_lower(value.total_amount)
        _UniffiConverterDouble.check_lower(value.debit_service)
        _UniffiConverterDouble.check_lower(value.customer_debit_service_amount)
        _UniffiConverterDouble.check_lower(value.customer_amount)
        _UniffiConverterDouble.check_lower(value.calculation_basis_for_effective_interest_rate)
        _UniffiConverterDouble.check_lower(value.merchant_debit_service_amount)
        _UniffiConverterDouble.check_lower(value.merchant_total_amount)
        _UniffiConverterDouble.check_lower(value.settled_to_merchant)
        _UniffiConverterDouble.check_lower(value.mdr_amount)
        _UniffiConverterDouble.check_lower(value.effective_interest_rate)
        _UniffiConverterDouble.check_lower(value.total_effective_cost)
        _UniffiConverterDouble.check_lower(value.eir_yearly)
        _UniffiConverterDouble.check_lower(value.tec_yearly)
        _UniffiConverterDouble.check_lower(value.eir_monthly)
        _UniffiConverterDouble.check_lower(value.tec_monthly)
        _UniffiConverterDouble.check_lower(value.total_iof)
        _UniffiConverterDouble.check_lower(value.contract_amount)
        _UniffiConverterDouble.check_lower(value.contract_amount_without_tac)
        _UniffiConverterDouble.check_lower(value.tac_amount)
        _UniffiConverterDouble.check_lower(value.iof_percentage)
        _UniffiConverterDouble.check_lower(value.overall_iof)
        _UniffiConverterDouble.check_lower(value.pre_disbursement_amount)
        _UniffiConverterDouble.check_lower(value.paid_total_iof)
        _UniffiConverterDouble.check_lower(value.paid_contract_amount)

    @staticmethod
    def write(value, buf):
        _UniffiConverterUInt32.write(value.installment, buf)
        _UniffiConverterTimestamp.write(value.due_date, buf)
        _UniffiConverterTimestamp.write(value.disbursement_date, buf)
        _UniffiConverterInt64.write(value.accumulated_days, buf)
        _UniffiConverterDouble.write(value.days_index, buf)
        _UniffiConverterDouble.write(value.accumulated_days_index, buf)
        _UniffiConverterDouble.write(value.interest_rate, buf)
        _UniffiConverterDouble.write(value.installment_amount, buf)
        _UniffiConverterDouble.write(value.installment_amount_without_tac, buf)
        _UniffiConverterDouble.write(value.total_amount, buf)
        _UniffiConverterDouble.write(value.debit_service, buf)
        _UniffiConverterDouble.write(value.customer_debit_service_amount, buf)
        _UniffiConverterDouble.write(value.customer_amount, buf)
        _UniffiConverterDouble.write(value.calculation_basis_for_effective_interest_rate, buf)
        _UniffiConverterDouble.write(value.merchant_debit_service_amount, buf)
        _UniffiConverterDouble.write(value.merchant_total_amount, buf)
        _UniffiConverterDouble.write(value.settled_to_merchant, buf)
        _UniffiConverterDouble.write(value.mdr_amount, buf)
        _UniffiConverterDouble.write(value.effective_interest_rate, buf)
        _UniffiConverterDouble.write(value.total_effective_cost, buf)
        _UniffiConverterDouble.write(value.eir_yearly, buf)
        _UniffiConverterDouble.write(value.tec_yearly, buf)
        _UniffiConverterDouble.write(value.eir_monthly, buf)
        _UniffiConverterDouble.write(value.tec_monthly, buf)
        _UniffiConverterDouble.write(value.total_iof, buf)
        _UniffiConverterDouble.write(value.contract_amount, buf)
        _UniffiConverterDouble.write(value.contract_amount_without_tac, buf)
        _UniffiConverterDouble.write(value.tac_amount, buf)
        _UniffiConverterDouble.write(value.iof_percentage, buf)
        _UniffiConverterDouble.write(value.overall_iof, buf)
        _UniffiConverterDouble.write(value.pre_disbursement_amount, buf)
        _UniffiConverterDouble.write(value.paid_total_iof, buf)
        _UniffiConverterDouble.write(value.paid_contract_amount, buf)


# Error
# We want to define each variant as a nested class that's also a subclass,
# which is tricky in Python.  To accomplish this we're going to create each
# class separately, then manually add the child classes to the base class's
# __dict__.  All of this happens in dummy class to avoid polluting the module
# namespace.
class Error(Exception):
    pass

_UniffiTempError = Error

class Error:  # type: ignore
    class InvalidParams(_UniffiTempError):
        def __init__(self):
            pass

        def __repr__(self):
            return "Error.InvalidParams({})".format(str(self))
    _UniffiTempError.InvalidParams = InvalidParams # type: ignore
    class CalculationError(_UniffiTempError):
        def __init__(self):
            pass

        def __repr__(self):
            return "Error.CalculationError({})".format(str(self))
    _UniffiTempError.CalculationError = CalculationError # type: ignore

Error = _UniffiTempError # type: ignore
del _UniffiTempError


class _UniffiConverterTypeError(_UniffiConverterRustBuffer):
    @staticmethod
    def read(buf):
        variant = buf.read_i32()
        if variant == 1:
            return Error.InvalidParams(
            )
        if variant == 2:
            return Error.CalculationError(
            )
        raise InternalError("Raw enum value doesn't match any cases")

    @staticmethod
    def check_lower(value):
        if isinstance(value, Error.InvalidParams):
            return
        if isinstance(value, Error.CalculationError):
            return

    @staticmethod
    def write(value, buf):
        if isinstance(value, Error.InvalidParams):
            buf.write_i32(1)
        if isinstance(value, Error.CalculationError):
            buf.write_i32(2)



class _UniffiConverterSequenceTypeDownPaymentResponse(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeDownPaymentResponse.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeDownPaymentResponse.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeDownPaymentResponse.read(buf) for i in range(count)
        ]



class _UniffiConverterSequenceTypeResponse(_UniffiConverterRustBuffer):
    @classmethod
    def check_lower(cls, value):
        for item in value:
            _UniffiConverterTypeResponse.check_lower(item)

    @classmethod
    def write(cls, value, buf):
        items = len(value)
        buf.write_i32(items)
        for item in value:
            _UniffiConverterTypeResponse.write(item, buf)

    @classmethod
    def read(cls, buf):
        count = buf.read_i32()
        if count < 0:
            raise InternalError("Unexpected negative sequence length")

        return [
            _UniffiConverterTypeResponse.read(buf) for i in range(count)
        ]

# Async support

def calculate_down_payment_plan(params: "DownPaymentParams") -> "typing.List[DownPaymentResponse]":
    _UniffiConverterTypeDownPaymentParams.check_lower(params)
    
    return _UniffiConverterSequenceTypeDownPaymentResponse.lift(_uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_payment_plan_uniffi_fn_func_calculate_down_payment_plan,
        _UniffiConverterTypeDownPaymentParams.lower(params)))


def calculate_payment_plan(params: "Params") -> "typing.List[Response]":
    _UniffiConverterTypeParams.check_lower(params)
    
    return _UniffiConverterSequenceTypeResponse.lift(_uniffi_rust_call_with_error(_UniffiConverterTypeError,_UniffiLib.uniffi_payment_plan_uniffi_fn_func_calculate_payment_plan,
        _UniffiConverterTypeParams.lower(params)))


__all__ = [
    "InternalError",
    "Error",
    "DownPaymentParams",
    "DownPaymentResponse",
    "Params",
    "Response",
    "calculate_down_payment_plan",
    "calculate_payment_plan",
]

